{"version":3,"sources":["get-data/getUsers.js","components/entry-field.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["getUsers","fetch","then","response","json","users","map","user","userId","id","userName","username","EntryField","userInfo","onToggle","isMulti","useState","isActive","setIsActive","React","filter","setFilter","handleToggle","filteredUsers","toLowerCase","includes","className","index","checked","onClick","bind","type","onChange","event","target","value","onFocus","onBlur","App","setUserInfo","useEffect","localStorage","getItem","JSON","parse","data","setItem","stringify","newUserInfo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAWeA,MAXf,WACI,OAAOC,MAAM,8CACRC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACFA,EAAMC,KAAI,SAACC,GAAD,MAAW,CACjBC,OAAQD,EAAKE,GACbC,SAAUH,EAAKI,iB,OC8EhBC,EAlFI,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAA8B,IAApBC,eAAoB,SACzD,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BC,IAAMH,SAAS,IAA3C,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAA0CL,oBAAS,GAAnD,mBAUMM,GAVN,UAUqB,WACjBJ,GAAaD,KAGXM,EACS,KAAXH,EACMP,EACAA,EAASO,QAAO,SAACb,GAAD,OACdA,EAAKG,SAASc,cAAcC,SAASL,EAAOI,kBAGxD,OACI,mCACI,sBAAKE,UAAU,QAAf,UACI,sBAAKA,UAAU,gBAAf,UACKb,EAASP,KAAI,SAACC,EAAMoB,GACjB,IAAqB,IAAjBpB,EAAKqB,QACL,OACI,sBAAKF,UAAU,sBAAf,UACKnB,EAAKG,SACN,wBACIgB,UAAU,4BACVG,QAASf,EAASgB,KAAK,KAAMvB,EAAKC,UAErC,MANqCmB,MAWlD,uBACII,KAAK,OACLtB,GAAG,cACHuB,SAxCH,SAACC,GAClBZ,EAAUY,EAAMC,OAAOC,QAwCHC,QAASd,EACTe,OAAQf,IAEZ,wBACII,UAAU,4BACVG,QAASf,EAASgB,KAAK,KAAM,cAEjC,wBACIJ,UAAU,8BACVG,QAASP,OAIrB,oBAAII,UAAS,UAAKT,EAAW,gBAAiB,GAAjC,eAAb,SACCM,EAAcjB,KAAI,SAAAC,GAAI,OAAI,mCACvB,qBACIsB,QAASf,EAASgB,KAAK,KAAMvB,EAAKC,QAClCkB,UAAU,oBAFd,UAKKnB,EAAKG,SACJK,GACE,uBACIgB,KAAK,WACLH,QAASrB,EAAKqB,YANjBrB,EAAKC,qBChBnB8B,MA7Cf,WACI,MAAgCtB,mBAAS,IAAzC,mBAAOH,EAAP,KAAiB0B,EAAjB,KAoCA,OAfApB,IAAMqB,WAAU,WAC0B,OAAlCC,aAAaC,QAAQ,SACrBH,EAAYI,KAAKC,MAAMH,aAAaC,QAAQ,WAE5C1C,IAAWE,MAAK,SAAA2C,GACZA,EAAKvC,KAAI,SAAAC,GAEL,OADAA,EAAKqB,SAAU,EACRrB,KAEXkC,aAAaK,QAAQ,QAASH,KAAKI,UAAUF,IAC7CN,EAAYM,QAGrB,IAGC,qCACI,2CACA,cAAC,EAAD,CAAYhC,SAAUA,EAAUC,SArClB,SAACL,GACnB,IAAMuC,EAAcnC,EAASP,KAAI,SAAAC,GAC7B,OAAIA,EAAKC,SAAWC,EACT,2BACAF,GADP,IAEIqB,SAAUrB,EAAKqB,UAEL,aAAPnB,EACA,2BACAF,GADP,IAEIqB,SAAS,IAGVrB,KAEXkC,aAAaK,QAAQ,QAASH,KAAKI,UAAUC,IAC7CT,EAAYS,UCZLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.29e445da.chunk.js","sourcesContent":["function getUsers() {\r\n    return fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then((response) => response.json())\r\n        .then((users) =>\r\n            users.map((user) => ({\r\n                userId: user.id,\r\n                userName: user.username\r\n            }))\r\n        );\r\n}\r\n\r\nexport default getUsers;\r\n","import React, {useState} from 'react';\r\n\r\nconst EntryField = ({userInfo, onToggle, isMulti = true}) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [filter, setFilter] = React.useState(\"\");\r\n    const [isActiveInput, setIsActiveInput] = useState(false);\r\n\r\n    const handleChange = (event) => {\r\n        setFilter(event.target.value);\r\n    };\r\n\r\n    const handleClick = (event) => {\r\n        setIsActiveInput(!isActiveInput);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setIsActive(!isActive);\r\n    };\r\n\r\n    const filteredUsers =\r\n        filter === \"\"\r\n            ? userInfo\r\n            : userInfo.filter((user) =>\r\n                user.userName.toLowerCase().includes(filter.toLowerCase())\r\n            );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"users\">\r\n                <div className=\"input-wrapper\">\r\n                    {userInfo.map((user, index) => {\r\n                        if (user.checked === true) {\r\n                            return (\r\n                                <div className=\"input-wrapper__item\" key={index}>\r\n                                    {user.userName}\r\n                                    <button\r\n                                        className=\"input-wrapper__item-close\"\r\n                                        onClick={onToggle.bind(null, user.userId)}>\r\n                                    </button>\r\n                                    {\",\"}\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })}\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"entry-field\"\r\n                            onChange={handleChange}\r\n                            onFocus={handleToggle}\r\n                            onBlur={handleToggle}\r\n                        />\r\n                        <button\r\n                            className=\"input-wrapper__item-close\"\r\n                            onClick={onToggle.bind(null, \"closeAll\")}>\r\n                        </button>\r\n                        <button\r\n                            className=\"input-wrapper__chevron-down\"\r\n                            onClick={handleToggle}\r\n                        >\r\n                        </button>\r\n                </div>\r\n                <ul className={`${isActive ? 'display-none ': \"\"}users__list`}>\r\n                {filteredUsers.map(user => <>\r\n                    <li\r\n                        onClick={onToggle.bind(null, user.userId)}\r\n                        className=\"users__list__item\"\r\n                        key={user.userId}\r\n                    >\r\n                        {user.userName}\r\n                        { isMulti &&\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={user.checked}\r\n                            />\r\n                        }\r\n                    </li>\r\n                </>\r\n                )}\r\n            </ul>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EntryField;\r\n","import React, {useState} from 'react'\nimport './App.scss'\nimport getUsers from \"./get-data/getUsers\"\nimport EntryField from \"./components/entry-field\";\n\nfunction App() {\n    const [userInfo, setUserInfo] = useState([]);\n\n    const toggleHandler = (id) => {\n        const newUserInfo = userInfo.map(user => {\n            if (user.userId === id) {\n                return {\n                    ...user,\n                    checked: !user.checked\n                }\n            } else if (id === \"closeAll\"){\n                return {\n                    ...user,\n                    checked: false\n                }\n            }\n            return user;\n        });\n        localStorage.setItem('users', JSON.stringify(newUserInfo));\n        setUserInfo(newUserInfo)\n    }\n\n    React.useEffect(() => {\n        if (localStorage.getItem('users') !== null) {\n            setUserInfo(JSON.parse(localStorage.getItem('users')));\n        } else {\n            getUsers().then(data => {\n                data.map(user => {\n                    user.checked = false;\n                    return user;\n                });\n                localStorage.setItem('users', JSON.stringify(data));\n                setUserInfo(data);\n            });\n        }\n    }, []);\n\n    return (\n        <>\n            <h1>Test Task</h1>\n            <EntryField userInfo={userInfo} onToggle={toggleHandler}/>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}