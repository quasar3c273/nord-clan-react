{"version":3,"sources":["get-data/getUsers.js","components/popup-list.jsx","components/checked-list.jsx","components/select-field.jsx","components/entry-field.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["getUsers","fetch","then","response","json","users","map","user","userId","id","userName","username","PopupList","isActive","setDisplay","filteredUsers","isMulti","onToggle","handleClick","className","onClick","bind","length","checked","type","readOnly","CheckedList","userInfo","index","SelectField","handleChange","handleToggle","onChange","onFocus","EntryField","useState","setIsActive","React","filter","setFilter","display","toLowerCase","includes","event","target","value","App","setUserInfo","useEffect","localStorage","getItem","JSON","parse","data","setItem","stringify","newUserInfo","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74adfc01.chunk.js","sourcesContent":["function getUsers() {\n    return fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then((response) => response.json())\n        .then((users) =>\n            users.map((user) => ({\n                userId: user.id,\n                userName: user.username\n            }))\n        );\n}\n\nexport default getUsers;\n","import React from \"react\";\n\nconst PopupList = ({\n    isActive,\n    setDisplay,\n    filteredUsers,\n    isMulti,\n    onToggle,\n    handleClick\n}) => {\n    return (\n        <ul\n            key=\"list-popup\"\n            className={`${isActive ? \"display-none \" : \"\"}users__list`}\n            onClick={setDisplay.bind(null, true)}\n        >\n            {filteredUsers.length > 0 ? (\n                filteredUsers.map((user) => (\n                        <li\n                            key={`${user.userId}qwerty`}\n                            onClick={\n                                isMulti\n                                    ? onToggle.bind(null, user.userId)\n                                    : handleClick.bind(null, user.userId)\n                            }\n                            className={`${\n                                user.checked ? \"checked-user \" : \"\"\n                            }users__list__item`}\n                        >\n                    <span key={user.userName} className=\"test123\">\n                        {user.userName}\n                    </span>\n                            {isMulti && (\n                                <input\n                                    key={`${user.userId}qwertyqweq`}\n                                    className=\"qwerty12\"\n                                    type=\"checkbox\"\n                                    checked={user.checked}\n                                    readOnly\n                                />\n                            )}\n                        </li>\n                    ))\n            ) : (\n                <span className=\"test123\">Ничего не найдено</span>\n            )\n\n            }\n\n        </ul>\n    );\n};\n\nexport default PopupList;\n","import React from \"react\";\n\nconst CheckedList = ({ userInfo, onToggle, isMulti }) => {\n    return (\n        <div className=\"test42\">\n            {userInfo.map((user, index) => {\n                return (\n                    user.checked === true && (\n                        <div className=\"input-wrapper__item\" key={index}>\n                            {user.userName}\n                            <button\n                                className=\"input-wrapper__item-close\"\n                                onClick={onToggle.bind(null, user.userId)}\n                            />\n                            {isMulti ? \",\" : \"\"}\n                        </div>\n                    )\n                );\n            })}\n        </div>\n    );\n};\n\nexport default CheckedList;\n","import React from \"react\";\n\nconst SelectField = ({ handleChange, setDisplay, onToggle, handleToggle }) => {\n    return (\n        <div className=\"wrapper\">\n            <input\n                type=\"text\"\n                id=\"entry-field\"\n                onChange={handleChange}\n                onFocus={setDisplay.bind(null, false)}\n            />\n            <button\n                className=\"input-wrapper__item-close\"\n                onClick={onToggle.bind(null, \"closeAll\")}\n            />\n            <button\n                className=\"input-wrapper__chevron-down\"\n                onClick={handleToggle}\n            />\n        </div>\n    );\n};\n\nexport default SelectField;\n","import React, { useState } from \"react\";\nimport PopupList from \"./popup-list\";\nimport CheckedList from \"./checked-list\";\nimport SelectField from \"./select-field\";\n\nconst EntryField = ({ userInfo, onToggle, isMulti = false, handleClick }) => {\n    const [isActive, setIsActive] = useState(false);\n    const [filter, setFilter] = React.useState(\"\");\n\n    const handleChange = (event) => {\n        setFilter(event.target.value);\n    };\n\n    const handleToggle = () => {\n        setIsActive(!isActive);\n    };\n\n    const setDisplay = (display) => {\n        setIsActive(display);\n    };\n\n    const filteredUsers =\n        filter === \"\"\n            ? userInfo\n            : userInfo.filter((user) =>\n                  user.userName.toLowerCase().includes(filter.toLowerCase())\n              );\n\n    return (\n        <>\n            <div className=\"users\">\n                <div className=\"input-wrapper\">\n                    <CheckedList\n                        onToggle={onToggle}\n                        userInfo={userInfo}\n                        isMulti={isMulti}\n                    />\n                    <SelectField\n                        handleChange={handleChange}\n                        setDisplay={setDisplay}\n                        onToggle={onToggle}\n                        handleToggle={handleToggle}\n                    />\n                </div>\n                <PopupList\n                    isActive={isActive}\n                    setDisplay={setDisplay}\n                    filteredUsers={filteredUsers}\n                    isMulti={isMulti}\n                    onToggle={onToggle}\n                    handleClick={handleClick}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default EntryField;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport getUsers from \"./get-data/getUsers\";\nimport EntryField from \"./components/entry-field\";\n\nfunction App() {\n    const [userInfo, setUserInfo] = useState([]);\n\n    const handleClick = (id) => {\n        console.log(id);\n        const newUserInfo = userInfo.map((user) => {\n            if (user.userId === id) {\n                return {\n                    ...user,\n                    checked: !user.checked\n                };\n            } else {\n                return {\n                    ...user,\n                    checked: false\n                };\n            }\n        });\n        localStorage.setItem(\"users\", JSON.stringify(newUserInfo));\n        setUserInfo(newUserInfo);\n    };\n\n    const toggleHandler = (id) => {\n        const newUserInfo = userInfo.map((user) => {\n            if (user.userId === id) {\n                return {\n                    ...user,\n                    checked: !user.checked\n                };\n            } else if (id === \"closeAll\") {\n                return {\n                    ...user,\n                    checked: false\n                };\n            }\n            return user;\n        });\n        localStorage.setItem(\"users\", JSON.stringify(newUserInfo));\n        setUserInfo(newUserInfo);\n    };\n\n    useEffect(() => {\n        if (localStorage.getItem(\"users\") !== null) {\n            setUserInfo(JSON.parse(localStorage.getItem(\"users\")));\n        } else {\n            getUsers().then((data) => {\n                data.map((user) => {\n                    user.checked = false;\n                    return user;\n                });\n                localStorage.setItem(\"users\", JSON.stringify(data));\n                setUserInfo(data);\n            });\n        }\n    }, []);\n\n    return (\n        <>\n            <h1>Test Task</h1>\n            <EntryField\n                isMulti={true}\n                userInfo={userInfo}\n                onToggle={toggleHandler}\n                handleClick={handleClick}\n            />\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}