{"version":3,"sources":["components/popup-list.tsx","components/checked-list.tsx","hooks/useDebounce.tsx","components/select-field.tsx","get-data/getUsers.ts","components/entry-field.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["PopupList","isActive","setDisplay","filteredUsers","isMulti","onToggle","handleClick","classesSelectComponent","className","popupListAllNonDisplay","popupListAll","onClick","bind","length","map","user","userId","checked","checkedInPopupList","usersPopupListItems","userName","type","readOnly","notSearchOnList","CheckedList","userInfo","classCheckListWpapper","index","inputWrapperItem","classDelete","useDebounce","func","delay","ref","useRef","args","clearTimeout","current","window","setTimeout","SelectField","handleChange","handleToggle","arrowStatus","selectFieldWrapper","id","onChange","onFocus","chevronDown","chevronUp","getUsers","urlGetUsers","fetch","then","response","ok","json","users","username","Error","catch","error","console","log","EntryField","urlData","nameOnLocalStorage","useState","setIsActive","React","filter","setFilter","setUserInfo","loading","setLoading","display","toggleEnterEsc","event","key","toggleHandler","newUserInfo","localStorage","setItem","JSON","stringify","useEffect","getItem","localUserInfo","parse","data","removeItem","document","body","addEventListener","toLowerCase","includes","classWpapperSelect","classInputWrapper","target","value","checkboxUserClassName","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5ff30f50.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { infoAboutUsers, allClasses } from \"../types\";\r\n\r\ntype popupListTypes = {\r\n    isActive: boolean;\r\n    setDisplay: (e: boolean) => void;\r\n    filteredUsers: infoAboutUsers[];\r\n    isMulti: boolean;\r\n    onToggle: (id: \"closeAll\" | number) => void;\r\n    handleClick: (id: number) => void;\r\n    classesSelectComponent: allClasses;\r\n};\r\n\r\n/**\r\n * Компонент выпадающего списка\r\n * @param isActive - отображается ли компонент\r\n * @param setDisplay - функция для изменения отображения компонента\r\n * @param filteredUsers - отфильтрованные пользователи\r\n * @param isMulti - статус множественного выбора списка\r\n * @param onToggle - функция для изменения статуса множественного выбора\r\n * @param handleClick - функция для изменения статуса \"cheked\"\r\n * @param classesSelectComponent - классы компонента\r\n * @type popupListTypes - тип пропсов компонента\r\n */\r\n\r\nconst PopupList = ({\r\n    isActive,\r\n    setDisplay,\r\n    filteredUsers,\r\n    isMulti,\r\n    onToggle,\r\n    handleClick,\r\n    classesSelectComponent\r\n}: popupListTypes) => {\r\n    return (\r\n        <ul\r\n            key=\"list-popup\"\r\n            className={`${\r\n                isActive ? classesSelectComponent.popupListAllNonDisplay : \"\"\r\n            }${classesSelectComponent.popupListAll}`}\r\n            onClick={setDisplay.bind(null, true)}\r\n        >\r\n            {filteredUsers.length > 0 ? (\r\n                filteredUsers.map((user: any) => (\r\n                    <li\r\n                        key={`${user.userId}qwerty`}\r\n                        onClick={\r\n                            isMulti\r\n                                ? onToggle.bind(null, user.userId)\r\n                                : handleClick.bind(null, user.userId)\r\n                        }\r\n                        className={`${\r\n                            user.checked\r\n                                ? classesSelectComponent.checkedInPopupList\r\n                                : \"\"\r\n                        }${classesSelectComponent.usersPopupListItems}`}\r\n                    >\r\n                        <span key={user.userName}>{user.userName}</span>\r\n                        {isMulti && (\r\n                            <input\r\n                                key={`${user.userId}qwertyqweq`}\r\n                                type=\"checkbox\"\r\n                                checked={user.checked}\r\n                                readOnly\r\n                            />\r\n                        )}\r\n                    </li>\r\n                ))\r\n            ) : (\r\n                <div className={classesSelectComponent.notSearchOnList}>\r\n                    Ничего не найдено\r\n                </div>\r\n            )}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default PopupList;\r\n","import React from \"react\";\r\nimport { infoAboutUsers, allClasses } from \"../types\";\r\n\r\ntype typesPropsList = {\r\n    userInfo: infoAboutUsers[];\r\n    onToggle: (id: number) => void;\r\n    isMulti: boolean;\r\n    classesSelectComponent: allClasses;\r\n};\r\n\r\n/**\r\n * Компонент для отображения списка выбранных пользователей\r\n * @param userInfo - массив объектов пользователей\r\n * @param onToggle - функция для обработки изменения состояния выбора пользователя\r\n * @param isMulti - статус множественного выбора списка\r\n * @param classesSelectComponent - объект с классами для компонента\r\n * @type typesPropsList - тип пропсов компонента\r\n */\r\n\r\nconst CheckedList = ({\r\n    userInfo,\r\n    onToggle,\r\n    isMulti,\r\n    classesSelectComponent\r\n}: typesPropsList) => {\r\n    return (\r\n        <div className={classesSelectComponent.classCheckListWpapper}>\r\n            {userInfo.map((user, index) => {\r\n                return (\r\n                    user.checked === true && (\r\n                        <div\r\n                            className={classesSelectComponent.inputWrapperItem}\r\n                            key={index}\r\n                        >\r\n                            {user.userName}\r\n                            <button\r\n                                className={classesSelectComponent.classDelete}\r\n                                onClick={onToggle.bind(null, user.userId)}\r\n                            />\r\n                            {isMulti ? \",\" : \"\"}\r\n                        </div>\r\n                    )\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckedList;\r\n","import { useRef, SyntheticEvent } from \"react\";\r\n\r\ntype useDebounceHookTypes = {\r\n    current: number;\r\n};\r\n\r\n/**\r\n * @description - hook для задержки выполнения функции\r\n * @param func - функция, которую необходимо выполнить с задержкой\r\n * @param delay - задержка в миллисекундах\r\n * @type {useDebounceHookTypes} - тип возвращаемого значения\r\n */\r\n\r\nconst useDebounce = (func: Function, delay: number) => {\r\n    const ref: useDebounceHookTypes = useRef(0);\r\n\r\n    return (...args: SyntheticEvent[]) => {\r\n        clearTimeout(ref.current);\r\n        ref.current = window.setTimeout(() => func(...args), delay);\r\n    };\r\n};\r\n\r\nexport default useDebounce;\r\n","import React from \"react\";\r\nimport useDebounce from \"../hooks/useDebounce\";\r\nimport { allClasses } from \"../types\";\r\n\r\ntype typesPropsList = {\r\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    setDisplay: (e: boolean) => void;\r\n    onToggle: (id: \"closeAll\" | number) => void;\r\n    handleToggle: () => void;\r\n    arrowStatus: boolean;\r\n    classesSelectComponent: allClasses;\r\n};\r\n\r\n/**\r\n * Компонент пользовательского ввода\r\n * @param handleChange - функция обработки изменения значения поля ввода\r\n * @param setDisplay - функция отображения поля ввода\r\n * @param onToggle - функция очистки выбранных значений\r\n * @param handleToggle - функция открытия/закрытия popup\r\n * @param arrowStatus - статус показа кнопки выбора\r\n * @param classesSelectComponent - объект с классами компонента\r\n * @type typesPropsList - объект с типами пропсов компонента\r\n */\r\n\r\nconst SelectField = ({\r\n    handleChange,\r\n    setDisplay,\r\n    onToggle,\r\n    handleToggle,\r\n    arrowStatus,\r\n    classesSelectComponent\r\n}: typesPropsList) => {\r\n    return (\r\n        <div className={classesSelectComponent.selectFieldWrapper}>\r\n            <input\r\n                type=\"text\"\r\n                id=\"entry-field\"\r\n                onChange={useDebounce(handleChange, 500)}\r\n                onFocus={setDisplay.bind(null, false)}\r\n            />\r\n            <button\r\n                className={classesSelectComponent.classDelete}\r\n                onClick={onToggle.bind(null, \"closeAll\")}\r\n            />\r\n            <button\r\n                className={\r\n                    arrowStatus\r\n                        ? classesSelectComponent.chevronDown\r\n                        : classesSelectComponent.chevronUp\r\n                }\r\n                onClick={handleToggle}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectField;\r\n","type infoAboutUsers = {\r\n    id: number;\r\n    username: string;\r\n};\r\n\r\n/**\r\n * @type {infoAboutUsers[]} - типы данных массива объектов пользователей\r\n * @param urlGetUsers - URL для получения данных\r\n * @return {Promise<infoAboutUsers[]>} - возвращает промис с массивом объектов пользователей\r\n */\r\n\r\nfunction getUsers(urlGetUsers: string): Promise<infoAboutUsers[]> {\r\n    return fetch(urlGetUsers)\r\n        .then((response) => {\r\n            if (response.ok) {\r\n                return response.json().then((users) =>\r\n                    users.map((user: infoAboutUsers) => ({\r\n                        userId: user.id,\r\n                        userName: user.username,\r\n                        checked: false\r\n                    }))\r\n                );\r\n            } else {\r\n                throw new Error(\"Ошибка при получении данных\");\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n}\r\n\r\nexport default getUsers;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PopupList from \"./popup-list\";\r\nimport CheckedList from \"./checked-list\";\r\nimport SelectField from \"./select-field\";\r\nimport { infoAboutUsers, allClasses } from \"../types\";\r\nimport getUsers from \"../get-data/getUsers\";\r\n\r\ntype typesPropsList = {\r\n    isMulti: boolean;\r\n    nameOnLocalStorage: string;\r\n    classesSelectComponent: allClasses;\r\n    urlData: string;\r\n};\r\n\r\n/**\r\n * Компонент для выбора пользователей из списка\r\n * @param urlData - адрес для получения данных\r\n * @param isMulti - статус множественного выбора списка\r\n * @param nameOnLocalStorage - имя переменной в localStorage\r\n * @param classesSelectComponent - классы компонента\r\n * @type typesPropsList - тип пропсов компонента\r\n */\r\n\r\nconst EntryField = ({\r\n    urlData,\r\n    isMulti = false,\r\n    nameOnLocalStorage,\r\n    classesSelectComponent\r\n}: typesPropsList) => {\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [filter, setFilter] = React.useState(\"\");\r\n    const [userInfo, setUserInfo] = useState<infoAboutUsers[]>([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleClick = (id: number) => {\r\n        const newUserInfo: infoAboutUsers[] = userInfo.map(\r\n            (user: infoAboutUsers) => {\r\n                if (user.userId === id) {\r\n                    return {\r\n                        ...user,\r\n                        checked: !user.checked\r\n                    };\r\n                } else {\r\n                    return {\r\n                        ...user,\r\n                        checked: false\r\n                    };\r\n                }\r\n            }\r\n        );\r\n        localStorage.setItem(nameOnLocalStorage, JSON.stringify(newUserInfo));\r\n        setUserInfo(newUserInfo);\r\n    };\r\n\r\n    const handleChange: React.ChangeEventHandler<HTMLInputElement> = (\r\n        event\r\n    ) => {\r\n        setFilter(event.target.value);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setIsActive(!isActive);\r\n    };\r\n\r\n    const setDisplay = (display: boolean) => {\r\n        setIsActive(display);\r\n    };\r\n\r\n    function toggleEnterEsc(event: KeyboardEvent) {\r\n        if (event.key === \"Enter\") {\r\n            console.log(event.key);\r\n            setIsActive(false);\r\n        } else if (event.key === \"Escape\") {\r\n            setIsActive(true);\r\n        }\r\n    }\r\n\r\n    const toggleHandler = (id: number | \"closeAll\") => {\r\n        const newUserInfo = userInfo.map((user: infoAboutUsers) => {\r\n            if (user.userId === id) {\r\n                return {\r\n                    ...user,\r\n                    checked: !user.checked\r\n                };\r\n            } else if (id === \"closeAll\") {\r\n                return {\r\n                    ...user,\r\n                    checked: false\r\n                };\r\n            }\r\n            return user;\r\n        });\r\n        localStorage.setItem(nameOnLocalStorage, JSON.stringify(newUserInfo));\r\n        setUserInfo(newUserInfo);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(nameOnLocalStorage) !== null) {\r\n            const localUserInfo: string =\r\n                localStorage.getItem(nameOnLocalStorage) || \"\";\r\n            setUserInfo(JSON.parse(localUserInfo));\r\n        } else {\r\n            getUsers(urlData).then((data: any) => {\r\n                if (typeof data === \"undefined\") {\r\n                    setLoading(true);\r\n                    localStorage.removeItem(nameOnLocalStorage);\r\n                } else {\r\n                    localStorage.setItem(\r\n                        nameOnLocalStorage,\r\n                        JSON.stringify(data)\r\n                    );\r\n                    setUserInfo(data);\r\n                }\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        window.document.body.addEventListener(\"keydown\", toggleEnterEsc);\r\n    }, []);\r\n\r\n    const filteredUsers =\r\n        filter === \"\"\r\n            ? userInfo\r\n            : userInfo.filter((user) =>\r\n                  user.userName.toLowerCase().includes(filter.toLowerCase())\r\n              );\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <h3>Ошибка на стороне сервера</h3>\r\n            ) : (\r\n                <div className={classesSelectComponent.classWpapperSelect}>\r\n                    <div className={classesSelectComponent.classInputWrapper}>\r\n                        <CheckedList\r\n                            onToggle={toggleHandler}\r\n                            userInfo={userInfo}\r\n                            isMulti={isMulti}\r\n                            classesSelectComponent={classesSelectComponent}\r\n                        />\r\n                        <SelectField\r\n                            arrowStatus={isActive}\r\n                            handleChange={handleChange}\r\n                            setDisplay={setDisplay}\r\n                            onToggle={toggleHandler}\r\n                            handleToggle={handleToggle}\r\n                            classesSelectComponent={classesSelectComponent}\r\n                        />\r\n                    </div>\r\n                    <PopupList\r\n                        isActive={isActive}\r\n                        setDisplay={setDisplay}\r\n                        filteredUsers={filteredUsers}\r\n                        isMulti={isMulti}\r\n                        onToggle={toggleHandler}\r\n                        handleClick={handleClick}\r\n                        classesSelectComponent={classesSelectComponent}\r\n                    />\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EntryField;\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport EntryField from \"./components/entry-field\";\r\n\r\n/**\r\n * @description - массив для хранения имён классов компонента\r\n */\r\nconst classesSelectComponent = {\r\n    classWpapperSelect: \"users\",\r\n    classInputWrapper: \"input-wrapper\",\r\n    classCheckListWpapper: \"check-list-wrapper\",\r\n    inputWrapperItem: \"input-wrapper__item\",\r\n    classDelete: \"input-wrapper__item-close\",\r\n    selectFieldWrapper: \"wrapper\",\r\n    chevronUp: \"input-wrapper__chevron-up\",\r\n    chevronDown: \"input-wrapper__chevron-down\",\r\n    popupListAll: \"users__list\",\r\n    popupListAllNonDisplay: \"display-none \",\r\n    checkedInPopupList: \"checked-user \",\r\n    usersPopupListItems: \"users__list__item\",\r\n    checkboxUserClassName: \"\",\r\n    notSearchOnList: \"not-search\"\r\n};\r\n\r\nconst urlGetUsers: string = \"https://jsonplaceholder.typicode.com/users\";\r\n\r\n/**\r\n * @description - Компонент приложения\r\n */\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <h1>Test Task Nord Clan</h1>\r\n            <span>Инпут с возможностью мультивыбора</span>\r\n            <EntryField\r\n                isMulti={true}\r\n                nameOnLocalStorage=\"users42\"\r\n                classesSelectComponent={classesSelectComponent}\r\n                urlData={urlGetUsers}\r\n            />\r\n            <span>Инпут без возможности мультивыбора</span>\r\n            <EntryField\r\n                isMulti={false}\r\n                nameOnLocalStorage=\"users422\"\r\n                classesSelectComponent={classesSelectComponent}\r\n                urlData={urlGetUsers}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}